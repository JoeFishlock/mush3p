{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"API Reference","text":"<p>Simulate steadily solidifying three-phase mushy layers in a Hele-Shaw cell.</p>"},{"location":"#mush3p.boundary_conditions","title":"<code>boundary_conditions</code>","text":""},{"location":"#mush3p.boundary_conditions.get_boundary_conditions","title":"<code>get_boundary_conditions(non_dimensional_params, bottom_variables, top_variables)</code>","text":"<p>Function to return the boundary conditions for scipy solve_BVP.</p> <p>The returned array is zero when the boundary conditions are satisfied.</p> <p>Parameters:</p> Name Type Description Default <code>non_dimensional_params</code> <code>NonDimensionalParams</code> <p>Non-dimensional parameters</p> required <code>bottom_variables</code> <code>NDArray</code> <p>Array of the solution variables evaluated at the bottom boundary.</p> required <code>top_variables</code> <code>NDArray</code> <p>Array of the solution variables evaluated at the top boundary.</p> required <p>Returns:</p> Name Type Description <code>NDArray</code> <code>NDArray</code> <p>residual of the boundary conditions</p> Source code in <code>mush3p/boundary_conditions.py</code> <pre><code>def get_boundary_conditions(\n    non_dimensional_params: NonDimensionalParams,\n    bottom_variables: NDArray,\n    top_variables: NDArray,\n) -&gt; NDArray:\n    \"\"\"Function to return the boundary conditions for scipy solve_BVP.\n\n    The returned array is zero when the boundary conditions are satisfied.\n\n    Args:\n        non_dimensional_params (NonDimensionalParams): Non-dimensional parameters\n        bottom_variables (NDArray): Array of the solution variables evaluated at the bottom boundary.\n        top_variables (NDArray): Array of the solution variables evaluated at the top boundary.\n\n    Returns:\n        NDArray: residual of the boundary conditions\n    \"\"\"\n\n    OPTIONS = {\n        \"full\": BoundaryConditionsFull,\n        \"incompressible\": BoundaryConditionsIncompressible,\n        \"reduced\": BoundaryConditionsReduced,\n        \"instant\": BoundaryConditionsInstant,\n    }\n    return OPTIONS[non_dimensional_params.model_choice](\n        non_dimensional_params, bottom_variables, top_variables\n    ).boundary_conditions\n</code></pre>"},{"location":"#mush3p.model","title":"<code>model</code>","text":""},{"location":"#mush3p.model.full","title":"<code>full</code>","text":""},{"location":"#mush3p.model.full.FullModel","title":"<code>FullModel</code>","text":"<p>Implement the full model equations and provide the ode_fun method to be used by scipy solve_BVP.</p> <p>The gas fraction is calculated by solving a non-linear equation and is fully coupled to the liquid darcy flux. Solid, liquid and gas fractions sum to one. Gas density is calculated from the ideal gas law.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>NonDimensionalParams</code> <p>Non-dimensional parameters</p> required <code>height</code> <code>NDArray</code> <p>Height values</p> required <code>temperature</code> <code>NDArray</code> <p>Temperature values</p> required <code>temperature_derivative</code> <code>NDArray</code> <p>Temperature derivative values</p> required <code>dissolved_gas_concentration</code> <code>NDArray</code> <p>Dissolved gas concentration values</p> required <code>hydrostatic_pressure</code> <code>NDArray</code> <p>Hydrostatic pressure values</p> required <code>frozen_gas_fraction</code> <code>NDArray</code> <p>Frozen gas fraction</p> required <code>mushy_layer_depth</code> <code>NDArray</code> <p>Mushy layer depth</p> required Source code in <code>mush3p/model/full.py</code> <pre><code>class FullModel:\n    \"\"\"Implement the full model equations and provide the ode_fun method to be used by\n    scipy solve_BVP.\n\n    The gas fraction is calculated by solving a non-linear equation and is fully coupled\n    to the liquid darcy flux.\n    Solid, liquid and gas fractions sum to one.\n    Gas density is calculated from the ideal gas law.\n\n    Args:\n        params (NonDimensionalParams): Non-dimensional parameters\n        height (NDArray): Height values\n        temperature (NDArray): Temperature values\n        temperature_derivative (NDArray): Temperature derivative values\n        dissolved_gas_concentration (NDArray): Dissolved gas concentration values\n        hydrostatic_pressure (NDArray): Hydrostatic pressure values\n        frozen_gas_fraction (NDArray): Frozen gas fraction\n        mushy_layer_depth (NDArray): Mushy layer depth\"\"\"\n\n    def __init__(\n        self,\n        params: NonDimensionalParams,\n        height: NDArray,\n        temperature: NDArray,\n        temperature_derivative: NDArray,\n        dissolved_gas_concentration: NDArray,\n        hydrostatic_pressure: NDArray,\n        frozen_gas_fraction: NDArray,\n        mushy_layer_depth: NDArray,\n    ) -&gt; None:\n        self.params = params\n        self.height = height\n        self.temperature = temperature\n        self.temperature_derivative = temperature_derivative\n        self.dissolved_gas_concentration = dissolved_gas_concentration\n        self.hydrostatic_pressure = hydrostatic_pressure\n        self.frozen_gas_fraction = frozen_gas_fraction\n        self.mushy_layer_depth = mushy_layer_depth\n\n    @property\n    def solid_salinity(self) -&gt; NDArray:\n        return np.full_like(self.temperature, -self.params.concentration_ratio)\n\n    @property\n    def liquid_salinity(self) -&gt; NDArray:\n        return -self.temperature\n\n    @property\n    def solid_fraction(self) -&gt; NDArray:\n        concentration_ratio = self.params.concentration_ratio\n        return (\n            -(1 - self.frozen_gas_fraction)\n            * self.temperature\n            / (concentration_ratio - self.temperature)\n        )\n\n    @property\n    def liquid_fraction(self) -&gt; NDArray:\n        return calculate_liquid_fraction(self.gas_fraction, self.solid_fraction)\n\n    @property\n    def gas_darcy_velocity(\n        self,\n    ) -&gt; NDArray:\n        return calculate_gas_darcy_velocity(\n            self.solid_fraction,\n            self.gas_fraction,\n            self.params,\n        )\n\n    @property\n    def gas_density(\n        self,\n    ):\n        return calculate_gas_density(\n            self.height,\n            self.mushy_layer_depth,\n            self.temperature,\n            self.hydrostatic_pressure,\n            self.params,\n        )\n\n    @property\n    def gas_fraction(\n        self,\n    ) -&gt; Any:\n        return calculate_gas_fraction(\n            self.frozen_gas_fraction,\n            self.solid_fraction,\n            self.temperature,\n            self.dissolved_gas_concentration,\n            self.gas_density,\n            self.params,\n        )\n\n    @property\n    def liquid_darcy_velocity(self):\n        return calculate_liquid_darcy_velocity(\n            self.gas_fraction, self.frozen_gas_fraction\n        )\n\n    @property\n    def permeability(self) -&gt; NDArray:\n        liquid_permeability_reciprocal = (\n            1 - self.liquid_fraction\n        ) ** 2 / self.liquid_fraction**3\n        reference = self.params.hele_shaw_permeability_scaled\n        return ((1 / reference) + liquid_permeability_reciprocal) ** (-1)\n\n    @property\n    def saturation_concentration(self) -&gt; NDArray:\n        return np.full_like(self.temperature, 1)\n\n    @property\n    def nucleation_rate(self) -&gt; NDArray:\n        indicator = np.where(\n            self.dissolved_gas_concentration &gt;= self.saturation_concentration, 1, 0\n        )\n\n        return (\n            self.liquid_fraction\n            * indicator\n            * (self.dissolved_gas_concentration - self.saturation_concentration)\n        )\n\n    @property\n    def solid_fraction_derivative(\n        self,\n    ) -&gt; NDArray:\n        concentration_ratio = self.params.concentration_ratio\n        return (\n            -concentration_ratio\n            * (1 - self.frozen_gas_fraction)\n            * self.temperature_derivative\n            / (concentration_ratio - self.temperature) ** 2\n        )\n\n    @property\n    def gas_fraction_derivative(self) -&gt; NDArray:\n        \"\"\"Numerically approximate the derivative with finite difference.\"\"\"\n        return np.gradient(self.gas_fraction, self.height)\n\n    @property\n    def hydrostatic_pressure_derivative(\n        self,\n    ) -&gt; NDArray:\n        return -self.mushy_layer_depth * self.liquid_darcy_velocity / self.permeability\n\n    @property\n    def effective_heat_capacity(self):\n        solid_specific_heat_capacity_ratio = (\n            self.params.solid_specific_heat_capacity_ratio\n        )\n        gas_specific_heat_capacity_ratio = self.params.gas_specific_heat_capacity_ratio\n        density_ratio = self.params.gas_density_ratio\n        return (\n            1\n            - (1 - solid_specific_heat_capacity_ratio) * self.solid_fraction\n            - (1 - gas_specific_heat_capacity_ratio * density_ratio * self.gas_density)\n            * self.gas_fraction\n        )\n\n    @property\n    def effective_thermal_conductivity(self):\n        gas_conductivity_ratio = self.params.gas_conductivity_ratio\n        solid_conductivity_ratio = self.params.solid_conductivity_ratio\n        return (\n            1\n            - (1 - solid_conductivity_ratio) * self.solid_fraction\n            - (1 - gas_conductivity_ratio) * self.gas_fraction\n        )\n\n    @property\n    def temperature_second_derivative(\n        self,\n    ) -&gt; NDArray:\n        stefan_number = self.params.stefan_number\n        gas_specific_heat_capacity_ratio = self.params.gas_specific_heat_capacity_ratio\n        density_ratio = self.params.gas_density_ratio\n        gas_conductivity_ratio = self.params.gas_conductivity_ratio\n        solid_conductivity_ratio = self.params.solid_conductivity_ratio\n\n        heat_capacity_term = (\n            self.mushy_layer_depth\n            * self.effective_heat_capacity\n            * self.temperature_derivative\n        )\n        liquid_advection_term = (\n            self.mushy_layer_depth\n            * self.liquid_darcy_velocity\n            * self.temperature_derivative\n        )\n        gas_advection_term = (\n            self.mushy_layer_depth\n            * density_ratio\n            * self.gas_density\n            * gas_specific_heat_capacity_ratio\n            * self.gas_darcy_velocity\n            * self.temperature_derivative\n        )\n        latent_heat_term = (\n            -self.mushy_layer_depth * stefan_number * self.solid_fraction_derivative\n        )\n        conductivity_change_term = (\n            (1 - solid_conductivity_ratio) * self.solid_fraction_derivative\n            + (1 - gas_conductivity_ratio) * self.gas_fraction_derivative\n        ) * self.temperature_derivative\n\n        return (1 / self.effective_thermal_conductivity) * (\n            heat_capacity_term\n            + liquid_advection_term\n            + gas_advection_term\n            + latent_heat_term\n            + conductivity_change_term\n        )\n\n    @property\n    def dissolved_gas_concentration_derivative(\n        self,\n    ) -&gt; NDArray:\n\n        damkholer_number = self.params.damkholer_number\n        freezing = self.dissolved_gas_concentration * self.solid_fraction_derivative\n        dissolution = -damkholer_number * self.mushy_layer_depth * self.nucleation_rate\n\n        return (freezing + dissolution) / (\n            1 - self.frozen_gas_fraction - self.solid_fraction\n        )\n\n    @property\n    def check_volume_fractions_sum_to_one(self):\n        if (\n            np.max(\n                np.abs(\n                    self.solid_fraction + self.liquid_fraction + self.gas_fraction - 1\n                )\n            )\n            &gt; VOLUME_SUM_TOLERANCE\n        ):\n            return False\n        return True\n\n    @property\n    def ode_fun(self):\n\n        if not self.check_volume_fractions_sum_to_one:\n            raise ValueError(\"Volume fractions do not sum to 1\")\n\n        return np.vstack(\n            (\n                self.temperature_derivative,\n                self.temperature_second_derivative,\n                self.dissolved_gas_concentration_derivative,\n                self.hydrostatic_pressure_derivative,\n                np.zeros_like(self.temperature),\n                np.zeros_like(self.temperature),\n            )\n        )\n</code></pre>"},{"location":"#mush3p.model.full.FullModel.gas_fraction_derivative","title":"<code>gas_fraction_derivative: NDArray</code>  <code>property</code>","text":"<p>Numerically approximate the derivative with finite difference.</p>"},{"location":"#mush3p.model.incompressible","title":"<code>incompressible</code>","text":""},{"location":"#mush3p.model.incompressible.IncompressibleModel","title":"<code>IncompressibleModel</code>","text":"<p>               Bases: <code>FullModel</code></p> <p>implement equations for the incompressible model.</p> <p>These are identical to the full model but with the dimensionless gas density set to 1.0.</p> Source code in <code>mush3p/model/incompressible.py</code> <pre><code>class IncompressibleModel(FullModel):\n    \"\"\"implement equations for the incompressible model.\n\n    These are identical to the full model but with the dimensionless gas density set to 1.0.\n    \"\"\"\n\n    @property\n    def gas_density(\n        self,\n    ):\n        return np.ones_like(self.temperature)\n</code></pre>"},{"location":"#mush3p.model.instant","title":"<code>instant</code>","text":"<p>The equations for solving the instant nucleation model</p> <p>All quantities are calculated from the smaller set of variables: temperature temperature_derivative hydrostatic_pressure frozen_gas_fraction mushy_layer_depth</p> <p>height (vertical coordinate)</p>"},{"location":"#mush3p.model.instant.InstantNucleationModel","title":"<code>InstantNucleationModel</code>","text":"<p>               Bases: <code>ReducedModel</code></p> <p>Implements the equations to solve the instant model.</p> <p>This is an extension of the reduced model where the nucleation rate is infinite and and so any supersaturations is immediately converted to the gas phase. This means we do not need to solve the ODE for dissolved gas concentration in this case.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>NonDimensionalParams</code> <p>Non-dimensional parameters</p> required <code>height</code> <code>NDArray</code> <p>Height values</p> required <code>temperature</code> <code>NDArray</code> <p>Temperature values</p> required <code>temperature_derivative</code> <code>NDArray</code> <p>Temperature derivative values</p> required <code>hydrostatic_pressure</code> <code>NDArray</code> <p>Hydrostatic pressure values</p> required <code>frozen_gas_fraction</code> <code>NDArray</code> <p>Frozen gas fraction</p> required <code>mushy_layer_depth</code> <code>NDArray</code> <p>Mushy layer depth</p> required Source code in <code>mush3p/model/instant.py</code> <pre><code>class InstantNucleationModel(ReducedModel):\n    \"\"\"Implements the equations to solve the instant model.\n\n    This is an extension of the reduced model where the nucleation rate is infinite and\n    and so any supersaturations is immediately converted to the gas phase.\n    This means we do not need to solve the ODE for dissolved gas concentration in this\n    case.\n\n    Args:\n        params (NonDimensionalParams): Non-dimensional parameters\n        height (NDArray): Height values\n        temperature (NDArray): Temperature values\n        temperature_derivative (NDArray): Temperature derivative values\n        hydrostatic_pressure (NDArray): Hydrostatic pressure values\n        frozen_gas_fraction (NDArray): Frozen gas fraction\n        mushy_layer_depth (NDArray): Mushy layer depth\"\"\"\n\n    def __init__(\n        self,\n        params: NonDimensionalParams,\n        height: NDArray,\n        temperature: NDArray,\n        temperature_derivative: NDArray,\n        hydrostatic_pressure: NDArray,\n        frozen_gas_fraction: NDArray,\n        mushy_layer_depth: NDArray,\n    ) -&gt; None:\n        self.params = params\n        self.height = height\n        self.temperature = temperature\n        self.temperature_derivative = temperature_derivative\n        self.hydrostatic_pressure = hydrostatic_pressure\n        self.frozen_gas_fraction = frozen_gas_fraction\n        self.mushy_layer_depth = mushy_layer_depth\n\n    @property\n    def dissolved_gas_concentration(self):\n        return np.minimum(\n            np.ones_like(self.liquid_fraction),\n            self.params.far_dissolved_concentration_scaled / self.liquid_fraction,\n        )\n\n    @property\n    def ode_fun(self) -&gt; Any:\n\n        if not self.check_volume_fractions_sum_to_one:\n            raise ValueError(\"Volume fractions do not sum to 1\")\n\n        return np.vstack(\n            (\n                self.temperature_derivative,\n                self.temperature_second_derivative,\n                self.hydrostatic_pressure_derivative,\n                np.zeros_like(self.temperature),\n                np.zeros_like(self.temperature),\n            )\n        )\n</code></pre>"},{"location":"#mush3p.model.reduced","title":"<code>reduced</code>","text":""},{"location":"#mush3p.model.reduced.ReducedModel","title":"<code>ReducedModel</code>","text":"<p>               Bases: <code>IncompressibleModel</code></p> <p>Implement the equations for the reduced model</p> <p>The reduced model is an approximation to the full model where the exsolved gas volume fraction is small and incompressible. Under this approximation scheme the solid and liquid volume fractions sum to 1 and the exsolution of gas does not drive a liquid flow.</p> Source code in <code>mush3p/model/reduced.py</code> <pre><code>class ReducedModel(IncompressibleModel):\n    \"\"\"Implement the equations for the reduced model\n\n    The reduced model is an approximation to the full model where the exsolved gas\n    volume fraction is small and incompressible.\n    Under this approximation scheme the solid and liquid volume fractions sum to 1\n    and the exsolution of gas does not drive a liquid flow.\n    \"\"\"\n\n    @property\n    def liquid_darcy_velocity(self) -&gt; NDArray:\n        return np.zeros_like(self.temperature)\n\n    @property\n    def solid_fraction(self) -&gt; NDArray:\n        concentration_ratio = self.params.concentration_ratio\n        return self.temperature / (self.temperature - concentration_ratio)\n\n    @property\n    def liquid_fraction(self) -&gt; NDArray:\n        return 1 - self.solid_fraction\n\n    @property\n    def gas_fraction(\n        self,\n    ) -&gt; Any:\n        return calculate_gas_fraction(\n            0,\n            self.solid_fraction,\n            self.temperature,\n            self.dissolved_gas_concentration,\n            1,\n            self.params,\n        )\n\n    @property\n    def solid_fraction_derivative(\n        self,\n    ) -&gt; NDArray:\n        concentration_ratio = self.params.concentration_ratio\n        return (\n            -concentration_ratio\n            * self.temperature_derivative\n            / ((self.temperature - concentration_ratio) ** 2)\n        )\n\n    @property\n    def hydrostatic_pressure_derivative(\n        self,\n    ) -&gt; NDArray:\n        return np.zeros_like(self.temperature)\n\n    @property\n    def effective_heat_capacity(self):\n        solid_specific_heat_capacity_ratio = (\n            self.params.solid_specific_heat_capacity_ratio\n        )\n        return 1 - (1 - solid_specific_heat_capacity_ratio) * self.solid_fraction\n\n    @property\n    def effective_thermal_conductivity(self):\n        solid_conductivity_ratio = self.params.solid_conductivity_ratio\n        return 1 - (1 - solid_conductivity_ratio) * self.solid_fraction\n\n    @property\n    def temperature_second_derivative(\n        self,\n    ) -&gt; NDArray:\n        stefan_number = self.params.stefan_number\n        solid_conductivity_ratio = self.params.solid_conductivity_ratio\n\n        heat_capacity_term = (\n            self.mushy_layer_depth\n            * self.effective_heat_capacity\n            * self.temperature_derivative\n        )\n        latent_heat_term = (\n            -self.mushy_layer_depth * stefan_number * self.solid_fraction_derivative\n        )\n        conductivity_change_term = (\n            (1 - solid_conductivity_ratio) * self.solid_fraction_derivative\n        ) * self.temperature_derivative\n\n        return (1 / self.effective_thermal_conductivity) * (\n            heat_capacity_term + latent_heat_term + conductivity_change_term\n        )\n\n    @property\n    def dissolved_gas_concentration_derivative(\n        self,\n    ) -&gt; NDArray:\n\n        damkholer_number = self.params.damkholer_number\n        dissolution = -damkholer_number * self.mushy_layer_depth * self.nucleation_rate\n\n        return (1 / self.liquid_fraction) * (\n            self.dissolved_gas_concentration * self.solid_fraction_derivative\n            + dissolution\n        )\n\n    @property\n    def check_volume_fractions_sum_to_one(self):\n        if (\n            np.max(np.abs(self.solid_fraction + self.liquid_fraction - 1))\n            &gt; VOLUME_SUM_TOLERANCE\n        ):\n            return False\n        return True\n</code></pre>"},{"location":"#mush3p.output","title":"<code>output</code>","text":""},{"location":"#mush3p.output.NonDimensionalResults","title":"<code>NonDimensionalResults</code>","text":"<p>Class to store non-dimensional solution profiles and provide methods to linearly interpolate them with depth.</p> <p>The class also provides a save method to serialize the non-dimensional parameters and solution arrays to a JSON file, and a load method to deserialize them back into a NonDimensionalResults object.</p> <p>The class calcualtes all mushy layer arrays using the model specified in the non-dimensional parameters.</p> <p>Parameters:</p> Name Type Description Default <code>non_dimensional_parameters</code> <code>NonDimensionalParams</code> <p>Non-dimensional parameters</p> required <code>temperature_array</code> <code>ndarray</code> <p>Temperature profile</p> required <code>temperature_derivative_array</code> <code>ndarray</code> <p>Temperature derivative profile</p> required <code>concentration_array</code> <code>ndarray</code> <p>Concentration profile</p> required <code>hydrostatic_pressure_array</code> <code>ndarray</code> <p>Hydrostatic pressure profile</p> required <code>frozen_gas_fraction</code> <code>float</code> <p>Frozen gas fraction</p> required <code>mushy_layer_depth</code> <code>float</code> <p>Mushy layer depth</p> required <code>height_array</code> <code>ndarray</code> <p>Vertical grid points.</p> required <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Name of the simulation</p> <code>params</code> <code>NonDimensionalParams</code> <p>Non-dimensional parameters</p> <code>temperature_array</code> <code>ndarray</code> <p>Temperature profile</p> <code>temperature_derivative_array</code> <code>ndarray</code> <p>Temperature derivative profile</p> <code>concentration_array</code> <code>ndarray</code> <p>Concentration profile</p> <code>hydrostatic_pressure_array</code> <code>ndarray</code> <p>Hydrostatic pressure profile</p> <code>frozen_gas_fraction</code> <code>float</code> <p>Frozen gas fraction</p> <code>mushy_layer_depth</code> <code>float</code> <p>Mushy layer depth</p> <code>height_array</code> <code>ndarray</code> <p>Vertical grid points</p> <code>solid_salinity_array</code> <code>ndarray</code> <p>Solid salinity profile</p> <code>liquid_salinity_array</code> <code>ndarray</code> <p>Liquid salinity profile</p> <code>solid_fraction_array</code> <code>ndarray</code> <p>Solid fraction profile</p> <code>liquid_fraction_array</code> <code>ndarray</code> <p>Liquid fraction profile</p> <code>gas_fraction_array</code> <code>ndarray</code> <p>Gas fraction profile</p> <code>gas_density_array</code> <code>ndarray</code> <p>Gas density profile</p> <code>liquid_darcy_velocity_array</code> <code>ndarray</code> <p>Liquid Darcy velocity profile</p> <code>gas_darcy_velocity_array</code> <code>ndarray</code> <p>Gas Darcy velocity profile</p> Source code in <code>mush3p/output.py</code> <pre><code>class NonDimensionalResults:\n    \"\"\"Class to store non-dimensional solution profiles and provide methods to linearly\n    interpolate them with depth.\n\n    The class also provides a save method to serialize the non-dimensional parameters\n    and solution arrays to a JSON file, and a load method to deserialize them back into\n    a NonDimensionalResults object.\n\n    The class calcualtes all mushy layer arrays using the model specified in the\n    non-dimensional parameters.\n\n    Args:\n        non_dimensional_parameters (NonDimensionalParams): Non-dimensional parameters\n        temperature_array (np.ndarray): Temperature profile\n        temperature_derivative_array (np.ndarray): Temperature derivative profile\n        concentration_array (np.ndarray): Concentration profile\n        hydrostatic_pressure_array (np.ndarray): Hydrostatic pressure profile\n        frozen_gas_fraction (float): Frozen gas fraction\n        mushy_layer_depth (float): Mushy layer depth\n        height_array (np.ndarray): Vertical grid points.\n\n    Attributes:\n        name (str): Name of the simulation\n        params (NonDimensionalParams): Non-dimensional parameters\n        temperature_array (np.ndarray): Temperature profile\n        temperature_derivative_array (np.ndarray): Temperature derivative profile\n        concentration_array (np.ndarray): Concentration profile\n        hydrostatic_pressure_array (np.ndarray): Hydrostatic pressure profile\n        frozen_gas_fraction (float): Frozen gas fraction\n        mushy_layer_depth (float): Mushy layer depth\n        height_array (np.ndarray): Vertical grid points\n        solid_salinity_array (np.ndarray): Solid salinity profile\n        liquid_salinity_array (np.ndarray): Liquid salinity profile\n        solid_fraction_array (np.ndarray): Solid fraction profile\n        liquid_fraction_array (np.ndarray): Liquid fraction profile\n        gas_fraction_array (np.ndarray): Gas fraction profile\n        gas_density_array (np.ndarray): Gas density profile\n        liquid_darcy_velocity_array (np.ndarray): Liquid Darcy velocity profile\n        gas_darcy_velocity_array (np.ndarray): Gas Darcy velocity profile\n    \"\"\"\n\n    def __init__(\n        self,\n        non_dimensional_parameters,\n        temperature_array,\n        temperature_derivative_array,\n        concentration_array,\n        hydrostatic_pressure_array,\n        frozen_gas_fraction,\n        mushy_layer_depth,\n        height_array,\n    ):\n        self.name = non_dimensional_parameters.name\n        self.params = non_dimensional_parameters\n\n        self.temperature_array = np.array(temperature_array)\n        self.temperature_derivative_array = np.array(temperature_derivative_array)\n        self.concentration_array = np.array(concentration_array)\n        self.hydrostatic_pressure_array = np.array(hydrostatic_pressure_array)\n        self.frozen_gas_fraction = frozen_gas_fraction\n        self.mushy_layer_depth = mushy_layer_depth\n        self.height_array = np.array(height_array)\n\n        # Calculate all mushy layer arrays\n        if self.params.model_choice == \"instant\":\n            model = MODEL_OPTIONS[self.params.model_choice](\n                self.params,\n                self.height_array,\n                self.temperature_array,\n                self.temperature_derivative_array,\n                self.hydrostatic_pressure_array,\n                self.frozen_gas_fraction,\n                self.mushy_layer_depth,\n            )\n        else:\n            model = MODEL_OPTIONS[self.params.model_choice](\n                self.params,\n                self.height_array,\n                self.temperature_array,\n                self.temperature_derivative_array,\n                self.concentration_array,\n                self.hydrostatic_pressure_array,\n                self.frozen_gas_fraction,\n                self.mushy_layer_depth,\n            )\n        self.solid_salinity_array = model.solid_salinity\n        self.liquid_salinity_array = model.liquid_salinity\n        self.solid_fraction_array = model.solid_fraction\n        self.liquid_fraction_array = model.liquid_fraction\n        self.gas_fraction_array = model.gas_fraction\n        self.gas_density_array = model.gas_density\n        self.liquid_darcy_velocity_array = model.liquid_darcy_velocity\n        self.gas_darcy_velocity_array = model.gas_darcy_velocity\n\n    def save(self, filename: str) -&gt; None:\n        data = {\n            \"non_dimensional_parameters\": asdict(self.params),\n            \"temperature_array\": self.temperature_array.tolist(),\n            \"temperature_derivative_array\": self.temperature_derivative_array.tolist(),\n            \"concentration_array\": self.concentration_array.tolist(),\n            \"hydrostatic_pressure_array\": self.hydrostatic_pressure_array.tolist(),\n            \"frozen_gas_fraction\": self.frozen_gas_fraction,\n            \"mushy_layer_depth\": self.mushy_layer_depth,\n            \"height_array\": self.height_array.tolist(),\n        }\n        with open(f\"{filename}.json\", \"w\") as fp:\n            json.dump(data, fp, indent=4)\n\n    @classmethod\n    def load(cls, filename: str):\n        with open(f\"{filename}.json\", \"r\") as fp:\n            data = json.load(fp)\n        params = data[\"non_dimensional_parameters\"]\n        data[\"non_dimensional_parameters\"] = NonDimensionalParams(**params)\n        return cls(**data)\n\n    def liquid_salinity(self, height):\n        return np.interp(\n            height, self.height_array, self.liquid_salinity_array, right=np.nan\n        )\n\n    def temperature(self, height):\n        liquid_darcy_velocity_at_bottom = self.liquid_darcy_velocity_array[0]\n        liquid_range = np.linspace(-10, -1.1, 100)\n        liquid_values = self.params.far_temperature_scaled * (\n            1\n            - np.exp(\n                (1 + liquid_darcy_velocity_at_bottom)\n                * self.mushy_layer_depth\n                * (liquid_range + 1)\n            )\n        )\n        return np.interp(\n            height,\n            np.hstack((liquid_range, self.height_array)),\n            np.hstack((liquid_values, self.temperature_array)),\n            left=self.params.far_temperature_scaled,\n        )\n\n    def concentration(self, height):\n        return np.interp(\n            height, self.height_array, self.concentration_array, right=np.nan\n        )\n\n    def hydrostatic_pressure(self, height):\n        return np.interp(\n            height, self.height_array, self.hydrostatic_pressure_array, right=np.nan\n        )\n\n    def solid_fraction(self, height):\n        return np.interp(\n            height,\n            self.height_array,\n            self.solid_fraction_array,\n            right=1 - self.frozen_gas_fraction,\n        )\n\n    def liquid_fraction(self, height):\n        return np.interp(height, self.height_array, self.liquid_fraction_array, right=0)\n\n    def gas_fraction(self, height):\n        return np.interp(\n            height,\n            self.height_array,\n            self.gas_fraction_array,\n            left=0,\n            right=self.frozen_gas_fraction,\n        )\n\n    def liquid_darcy_velocity(self, height):\n        return np.interp(\n            height, self.height_array, self.liquid_darcy_velocity_array, right=np.nan\n        )\n\n    def gas_darcy_velocity(self, height):\n        return np.interp(\n            height,\n            self.height_array,\n            self.gas_darcy_velocity_array,\n            left=np.nan,\n            right=0,\n        )\n\n    def gas_density(self, height):\n        gas_density_filtered = np.where(\n            self.gas_fraction_array &lt;= 0, np.nan, self.gas_density_array\n        )\n        return np.interp(height, self.height_array, gas_density_filtered, left=np.nan)\n</code></pre>"},{"location":"#mush3p.params","title":"<code>params</code>","text":""},{"location":"#mush3p.params.NonDimensionalParams","title":"<code>NonDimensionalParams</code>  <code>dataclass</code>","text":"<p>Non-dimensional parameters for the three phase mushy layer system.</p> <p>Note: these can be initialised directly or by using the non_dimensionalise method of PhysicalParams.</p> <p>This class also provides save and load methods to serialize and deserialize to JSON.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the simulation</p> required <code>model_choice</code> <code>str</code> <p>Choice of model to use, either \"full\", \"incompressible\", \"reduced\" or \"instant\"</p> required <code>concentration_ratio</code> <code>float</code> <p>Ratio of the far field salinity to the salinity difference</p> required <code>stefan_number</code> <code>float</code> <p>Ratio of the latent heat to the sensible heat</p> required <code>hele_shaw_permeability_scaled</code> <code>float</code> <p>Ratio of the permeability of the Hele-Shaw cell to the reference permeability</p> required <code>far_temperature_scaled</code> <code>float</code> <p>Non-dimensionalised far field temperature</p> required <code>damkholer_number</code> <code>float</code> <p>Ratio of the thermal time scale to the nucleation time scale</p> required <code>expansion_coefficient</code> <code>float</code> <p>Relative volume increase on exsolving a saturation amount of dissolved gas</p> required <code>stokes_rise_velocity_scaled</code> <code>float</code> <p>Ratio of the bubble Stokes' rise velocity to the reference velocity</p> required <code>bubble_radius_scaled</code> <code>float</code> <p>Ratio of the bubble radius to the pore throat radius</p> required <code>pore_throat_exponent</code> <code>float</code> <p>Power law exponent for pore throat radius as a function of porosity</p> required <code>far_dissolved_concentration_scaled</code> <code>float</code> <p>Ratio of the far field dissolved gas concentration to the saturation concentration</p> required Source code in <code>mush3p/params.py</code> <pre><code>@dataclass\nclass NonDimensionalParams:\n    \"\"\"Non-dimensional parameters for the three phase mushy layer system.\n\n    Note: these can be initialised directly or by using the non_dimensionalise method of PhysicalParams.\n\n    This class also provides save and load methods to serialize and deserialize to JSON.\n\n    Args:\n        name (str): Name of the simulation\n        model_choice (str): Choice of model to use, either \"full\", \"incompressible\", \"reduced\" or \"instant\"\n        concentration_ratio (float): Ratio of the far field salinity to the salinity difference\n        stefan_number (float): Ratio of the latent heat to the sensible heat\n        hele_shaw_permeability_scaled (float): Ratio of the permeability of the Hele-Shaw cell to the reference permeability\n        far_temperature_scaled (float): Non-dimensionalised far field temperature\n        damkholer_number (float): Ratio of the thermal time scale to the nucleation time scale\n        expansion_coefficient (float): Relative volume increase on exsolving a saturation amount of dissolved gas\n        stokes_rise_velocity_scaled (float): Ratio of the bubble Stokes' rise velocity to the reference velocity\n        bubble_radius_scaled (float): Ratio of the bubble radius to the pore throat radius\n        pore_throat_exponent (float): Power law exponent for pore throat radius as a function of porosity\n        far_dissolved_concentration_scaled (float): Ratio of the far field dissolved gas concentration to the saturation concentration\n    \"\"\"\n\n    name: str\n    model_choice: str\n\n    # mushy layer params\n    concentration_ratio: float\n    stefan_number: float\n    hele_shaw_permeability_scaled: float\n    far_temperature_scaled: float\n    solid_conductivity_ratio: float\n    solid_specific_heat_capacity_ratio: float\n    gas_specific_heat_capacity_ratio: float\n\n    # gas params\n    damkholer_number: float\n    expansion_coefficient: float\n    stokes_rise_velocity_scaled: float\n    bubble_radius_scaled: float\n    pore_throat_exponent: float\n    far_dissolved_concentration_scaled: float\n    gas_conductivity_ratio: float\n    gas_density_ratio: float\n\n    # compressible gas params\n    hydrostatic_pressure_scale: float\n    laplace_pressure_scale: float\n    kelvin_conversion_temperature: float\n    atmospheric_pressure_scaled: float\n\n    @classmethod\n    def load(cls, filename: str) -&gt; NonDimensionalParams:\n        params = json.load(open(f\"{filename}.json\"))\n        return cls(**params)\n\n    def save(self, filename: str) -&gt; None:\n        json.dump(asdict(self), open(f\"{filename}.json\", \"w\"), indent=4)\n</code></pre>"},{"location":"#mush3p.params.PhysicalParams","title":"<code>PhysicalParams</code>  <code>dataclass</code>","text":"<p>Dimensional parameters for the three phase mushy layer system.</p> <p>This class implements the calculation of non-dimensional parameters for the system and provides the non_dimensionalise method to provide a NonDimensionalParams object.</p> <p>This class also provides save and load methods to serialize and deserialize to JSON.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the simulation</p> required <code>model_choice</code> <code>str</code> <p>Choice of model to use, either \"full\", \"incompressible\", \"reduced\" or \"instant\"</p> <code>'full'</code> <code>bubble_radius</code> <code>float</code> <p>Radius of the bubbles [m]</p> <code>0.001</code> <code>nucleation_time_scale</code> <code>float</code> <p>Time scale for bubble nucleation [s]</p> <code>1000</code> <code>far_salinity</code> <code>float</code> <p>Salinity of the far field [g/kg]</p> <code>35</code> <code>far_temperature</code> <code>float</code> <p>Temperature of the far field [degC]</p> <code>0.1</code> <code>far_dissolved_gas_concentration</code> <code>float</code> <p>Dissolved gas concentration in the far field [kg/kg]</p> <code>3.71e-05</code> <code>reference_velocity</code> <code>float</code> <p>Pulling speed [m/s], the default value is 1 micron/s</p> <code>1e-06</code> <code>liquid_density</code> <code>float</code> <p>Density of the liquid [kg/m3]</p> <code>1028</code> <code>gravitational_acceleration</code> <code>float</code> <p>Acceleration due to gravity [m/s2]</p> <code>9.81</code> <code>liquid_dynamic_viscosity</code> <code>float</code> <p>Dynamic viscosity of the liquid [kg/m s], the default value gives the same kinematic viscosity used in Moreau et al 2014.</p> <code>0.00278</code> <code>surface_tension</code> <code>float</code> <p>Surface tension of the liquid [N/m]</p> <code>0.077</code> <code>liquidus_slope</code> <code>float</code> <p>Slope of the liquidus curve [deg C / g/kg]</p> <code>0.07</code> <code>eutectic_temperature</code> <code>float</code> <p>Eutectic temperature [deg C]</p> <code>-21.2</code> <code>latent_heat</code> <code>float</code> <p>Latent heat of fusion [J/kg]</p> <code>333000.0</code> <code>liquid_specific_heat_capacity</code> <code>float</code> <p>Specific heat capacity of the liquid [J/kg degC]</p> <code>4209</code> <code>solid_specific_heat_capacity</code> <code>float</code> <p>Specific heat capacity of the solid [J/kg degC]</p> <code>2108</code> <code>gas_specific_heat_capacity</code> <code>float</code> <p>Specific heat capacity of the gas [J/kg degC]</p> <code>1004</code> <code>liquid_thermal_conductivity</code> <code>float</code> <p>Thermal conductivity of the liquid [W/m degC]</p> <code>0.523</code> <code>solid_thermal_conductivity</code> <code>float</code> <p>Thermal conductivity of the solid [W/m degC]</p> <code>2.22</code> <code>gas_thermal_conductivity</code> <code>float</code> <p>Thermal conductivity of the gas [W/m degC]</p> <code>0.02</code> <code>hele_shaw_gap_width</code> <code>float</code> <p>Width of the Hele-Shaw cell [m], the default value is the same value used in the experiments of Peppin et al 2007</p> <code>0.005</code> <code>reference_permeability</code> <code>float</code> <p>Reference permeability [m2], the defulat value is the value used in Rees Jones and Worster 2014</p> <code>1e-08</code> <code>reference_pore_scale</code> <code>float</code> <p>Fitted pore throat radius at zero solid fraction [m], default value from Maus et al 2021</p> <code>0.000195</code> <code>pore_throat_exponent</code> <code>float</code> <p>Exponent for pore throat radius power law as a function of porosity, default value from Maus et al 2021</p> <code>0.46</code> <code>reference_saturation_concentration</code> <code>float</code> <p>Saturation concentration for dissolved gas [kg/kg]</p> <code>3.71e-05</code> <code>specific_gas_constant</code> <code>float</code> <p>Specific gas constant [J/kg degK]</p> <code>286</code> <code>atmospheric_pressure</code> <code>float</code> <p>Atmospheric pressure [Pa]</p> <code>101000.0</code> Source code in <code>mush3p/params.py</code> <pre><code>@dataclass\nclass PhysicalParams:\n    \"\"\"Dimensional parameters for the three phase mushy layer system.\n\n    This class implements the calculation of non-dimensional parameters for the system\n    and provides the non_dimensionalise method to provide a NonDimensionalParams object.\n\n    This class also provides save and load methods to serialize and deserialize to JSON.\n\n    Args:\n        name (str): Name of the simulation\n        model_choice (str): Choice of model to use, either \"full\", \"incompressible\", \"reduced\" or \"instant\"\n        bubble_radius (float): Radius of the bubbles [m]\n        nucleation_time_scale (float): Time scale for bubble nucleation [s]\n        far_salinity (float): Salinity of the far field [g/kg]\n        far_temperature (float): Temperature of the far field [degC]\n        far_dissolved_gas_concentration (float): Dissolved gas concentration in the far field [kg/kg]\n        reference_velocity (float): Pulling speed [m/s], the default value is 1 micron/s\n        liquid_density (float): Density of the liquid [kg/m3]\n        gravitational_acceleration (float): Acceleration due to gravity [m/s2]\n        liquid_dynamic_viscosity (float): Dynamic viscosity of the liquid [kg/m s],\n            the default value gives the same kinematic viscosity used in Moreau et al 2014.\n        surface_tension (float): Surface tension of the liquid [N/m]\n        liquidus_slope (float): Slope of the liquidus curve [deg C / g/kg]\n        eutectic_temperature (float): Eutectic temperature [deg C]\n        latent_heat (float): Latent heat of fusion [J/kg]\n        liquid_specific_heat_capacity (float): Specific heat capacity of the liquid [J/kg degC]\n        solid_specific_heat_capacity (float): Specific heat capacity of the solid [J/kg degC]\n        gas_specific_heat_capacity (float): Specific heat capacity of the gas [J/kg degC]\n        liquid_thermal_conductivity (float): Thermal conductivity of the liquid [W/m degC]\n        solid_thermal_conductivity (float): Thermal conductivity of the solid [W/m degC]\n        gas_thermal_conductivity (float): Thermal conductivity of the gas [W/m degC]\n        hele_shaw_gap_width (float): Width of the Hele-Shaw cell [m], the default value\n            is the same value used in the experiments of Peppin et al 2007\n        reference_permeability (float): Reference permeability [m2], the defulat value\n            is the value used in Rees Jones and Worster 2014\n        reference_pore_scale (float): Fitted pore throat radius at zero solid fraction [m],\n            default value from Maus et al 2021\n        pore_throat_exponent (float): Exponent for pore throat radius power law as a function of porosity,\n            default value from Maus et al 2021\n        reference_saturation_concentration (float): Saturation concentration for dissolved gas [kg/kg]\n        specific_gas_constant (float): Specific gas constant [J/kg degK]\n        atmospheric_pressure (float): Atmospheric pressure [Pa]\n    \"\"\"\n\n    name: str\n    model_choice: str = \"full\"\n    bubble_radius: float = 1e-3\n    nucleation_time_scale: float = 1000\n    far_salinity: float = 35\n    far_temperature: float = 0.1\n    far_dissolved_gas_concentration: float = 3.71e-5\n    reference_velocity: float = 1e-6\n    liquid_density: float = 1028\n    gravitational_acceleration: float = 9.81\n    liquid_dynamic_viscosity: float = 2.78e-3\n    surface_tension: float = 77e-3\n    liquidus_slope: float = 0.07\n    eutectic_temperature: float = -21.2\n    latent_heat: float = 333e3\n    liquid_specific_heat_capacity: float = 4209\n    solid_specific_heat_capacity: float = 2108\n    gas_specific_heat_capacity: float = 1004\n    liquid_thermal_conductivity: float = 0.523\n    solid_thermal_conductivity: float = 2.22\n    gas_thermal_conductivity: float = 2e-2\n    hele_shaw_gap_width: float = 5e-3\n    reference_permeability: float = 1e-8\n    reference_pore_scale: float = 1.95e-4\n    pore_throat_exponent: float = 0.46\n    reference_saturation_concentration: float = 3.71e-5\n    specific_gas_constant: float = 286\n    atmospheric_pressure: float = 1.01e5\n\n    @property\n    def initial_temperature(self) -&gt; float:\n        \"\"\"Liquidus freezing temperature of the liquid at salinty far_salinity\"\"\"\n        return -self.liquidus_slope * self.far_salinity\n\n    @property\n    def eutectic_salinity(self) -&gt; float:\n        \"\"\"Calculated eutectic salinity from linear liquidus relation\"\"\"\n        return -self.eutectic_temperature / self.liquidus_slope\n\n    @property\n    def liquid_thermal_diffusivity(self) -&gt; float:\n        return self.liquid_thermal_conductivity / (\n            self.liquid_density * self.liquid_specific_heat_capacity\n        )\n\n    @property\n    def length_scale(self) -&gt; float:\n        return self.liquid_thermal_diffusivity / self.reference_velocity\n\n    @property\n    def time_scale(self) -&gt; float:\n        return self.liquid_thermal_diffusivity / self.reference_velocity**2\n\n    @property\n    def reference_gas_density(self) -&gt; float:\n        return self.atmospheric_pressure / (\n            self.specific_gas_constant * (self.initial_temperature + CELSIUS_TO_KELVIN)\n        )\n\n    @property\n    def gas_density_ratio(self) -&gt; float:\n        return self.reference_gas_density / self.liquid_density\n\n    @property\n    def pressure_scale(self) -&gt; float:\n        return (\n            self.liquid_thermal_diffusivity\n            * self.liquid_dynamic_viscosity\n            / self.reference_permeability\n        )\n\n    @property\n    def concentration_ratio(self) -&gt; float:\n        salinity_diff = self.eutectic_salinity - self.far_salinity\n        return self.far_salinity / salinity_diff\n\n    @property\n    def stefan_number(self) -&gt; float:\n        temperature_diff = self.initial_temperature - self.eutectic_temperature\n        return self.latent_heat / (\n            temperature_diff * self.liquid_specific_heat_capacity\n        )\n\n    @property\n    def hele_shaw_permeability_scaled(self) -&gt; float:\n        return self.hele_shaw_gap_width**2 / (12 * self.reference_permeability)\n\n    @property\n    def far_temperature_scaled(self) -&gt; float:\n        return (self.far_temperature - self.initial_temperature) / (\n            self.initial_temperature - self.eutectic_temperature\n        )\n\n    @property\n    def damkholer_number(self) -&gt; float:\n        return self.time_scale / self.nucleation_time_scale\n\n    @property\n    def expansion_coefficient(self) -&gt; float:\n        return (\n            self.liquid_density * self.reference_saturation_concentration\n        ) / self.reference_gas_density\n\n    @property\n    def stokes_rise_velocity_scaled(self) -&gt; float:\n        return (\n            self.liquid_density\n            * self.gravitational_acceleration\n            * self.reference_pore_scale**2\n        ) / (3 * self.liquid_dynamic_viscosity * self.reference_velocity)\n\n    @property\n    def bubble_radius_scaled(self) -&gt; float:\n        return self.bubble_radius / self.reference_pore_scale\n\n    @property\n    def far_dissolved_concentration_scaled(self) -&gt; float:\n        return (\n            self.far_dissolved_gas_concentration\n            / self.reference_saturation_concentration\n        )\n\n    @property\n    def gas_conductivity_ratio(self) -&gt; float:\n        return self.gas_thermal_conductivity / self.liquid_thermal_conductivity\n\n    @property\n    def solid_conductivity_ratio(self) -&gt; float:\n        return self.solid_thermal_conductivity / self.liquid_thermal_conductivity\n\n    @property\n    def solid_specific_heat_capacity_ratio(self) -&gt; float:\n        return self.solid_specific_heat_capacity / self.liquid_specific_heat_capacity\n\n    @property\n    def gas_specific_heat_capacity_ratio(self) -&gt; float:\n        return self.gas_specific_heat_capacity / self.liquid_specific_heat_capacity\n\n    @property\n    def hydrostatic_pressure_scale(self) -&gt; float:\n        return (\n            self.liquid_density\n            * self.gravitational_acceleration\n            * self.liquid_thermal_diffusivity\n        ) / (self.atmospheric_pressure * self.reference_velocity)\n\n    @property\n    def laplace_pressure_scale(self) -&gt; float:\n        return (\n            2 * self.surface_tension / (self.bubble_radius * self.atmospheric_pressure)\n        )\n\n    @property\n    def kelvin_conversion_temperature(self) -&gt; float:\n        return (self.initial_temperature + CELSIUS_TO_KELVIN) / (\n            self.initial_temperature - self.eutectic_temperature\n        )\n\n    @property\n    def atmospheric_pressure_scaled(self) -&gt; float:\n        return self.atmospheric_pressure / self.pressure_scale\n\n    def non_dimensionalise(self) -&gt; NonDimensionalParams:\n        non_dimensional_params: Dict[str, Any] = {\n            \"name\": self.name,\n            \"model_choice\": self.model_choice,\n            \"concentration_ratio\": self.concentration_ratio,\n            \"stefan_number\": self.stefan_number,\n            \"hele_shaw_permeability_scaled\": self.hele_shaw_permeability_scaled,\n            \"far_temperature_scaled\": self.far_temperature_scaled,\n            \"damkholer_number\": self.damkholer_number,\n            \"expansion_coefficient\": self.expansion_coefficient,\n            \"stokes_rise_velocity_scaled\": self.stokes_rise_velocity_scaled,\n            \"bubble_radius_scaled\": self.bubble_radius_scaled,\n            \"pore_throat_exponent\": self.pore_throat_exponent,\n            \"far_dissolved_concentration_scaled\": self.far_dissolved_concentration_scaled,\n            \"gas_conductivity_ratio\": self.gas_conductivity_ratio,\n            \"solid_conductivity_ratio\": self.solid_conductivity_ratio,\n            \"solid_specific_heat_capacity_ratio\": self.solid_specific_heat_capacity_ratio,\n            \"gas_specific_heat_capacity_ratio\": self.gas_specific_heat_capacity_ratio,\n            \"hydrostatic_pressure_scale\": self.hydrostatic_pressure_scale,\n            \"laplace_pressure_scale\": self.laplace_pressure_scale,\n            \"kelvin_conversion_temperature\": self.kelvin_conversion_temperature,\n            \"atmospheric_pressure_scaled\": self.atmospheric_pressure_scaled,\n            \"gas_density_ratio\": self.gas_density_ratio,\n        }\n        return NonDimensionalParams(**non_dimensional_params)\n\n    @classmethod\n    def load(cls, filename: str) -&gt; PhysicalParams:\n        params = json.load(open(f\"{filename}.json\"))\n        return cls(**params)\n\n    def save(self, filename: str) -&gt; None:\n        json.dump(asdict(self), open(f\"{filename}.json\", \"w\"), indent=4)\n</code></pre>"},{"location":"#mush3p.params.PhysicalParams.eutectic_salinity","title":"<code>eutectic_salinity: float</code>  <code>property</code>","text":"<p>Calculated eutectic salinity from linear liquidus relation</p>"},{"location":"#mush3p.params.PhysicalParams.initial_temperature","title":"<code>initial_temperature: float</code>  <code>property</code>","text":"<p>Liquidus freezing temperature of the liquid at salinty far_salinity</p>"},{"location":"#mush3p.static_settings","title":"<code>static_settings</code>","text":""},{"location":"#mush3p.static_settings.get_initial_solution","title":"<code>get_initial_solution(model_choice)</code>","text":"<p>Get intial solution for scipy solve_BVP which satisfies the boundary conditions.</p> <p>Parameters:</p> Name Type Description Default <code>model_choice</code> <code>str</code> <p>one of \"full\", \"incompressible\" \"reduced\" or \"instant\"</p> required <p>Returns:     NDArray: initial solution for scipy solve_BVP</p> Source code in <code>mush3p/static_settings.py</code> <pre><code>def get_initial_solution(model_choice: str) -&gt; NDArray:\n    \"\"\"Get intial solution for scipy solve_BVP which satisfies the boundary conditions.\n\n    Args:\n        model_choice (str): one of \"full\", \"incompressible\" \"reduced\" or \"instant\"\n    Returns:\n        NDArray: initial solution for scipy solve_BVP\n    \"\"\"\n    if model_choice == \"instant\":\n        return np.vstack(\n            (\n                INITIAL_TEMPERATURE,\n                INITIAL_TEMPERATURE_DERIVATIVE,\n                INITIAL_HYDROSTATIC_PRESSURE,\n                INITIAL_FROZEN_GAS_FRACTION,\n                INITIAL_MUSHY_LAYER_DEPTH,\n            )\n        )\n    return np.vstack(\n        (\n            INITIAL_TEMPERATURE,\n            INITIAL_TEMPERATURE_DERIVATIVE,\n            INITIAL_DISSOLVED_GAS_CONCENTRATION,\n            INITIAL_HYDROSTATIC_PRESSURE,\n            INITIAL_FROZEN_GAS_FRACTION,\n            INITIAL_MUSHY_LAYER_DEPTH,\n        )\n    )\n</code></pre>"}]}